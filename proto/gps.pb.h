// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gps.proto

#ifndef PROTOBUF_gps_2eproto__INCLUDED
#define PROTOBUF_gps_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "pose.pb.h"
// @@protoc_insertion_point(includes)

namespace gnss_driver {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gps_2eproto();
void protobuf_AssignDesc_gps_2eproto();
void protobuf_ShutdownFile_gps_2eproto();

class Gps;

// ===================================================================

class Gps : public ::google::protobuf::Message {
 public:
  Gps();
  virtual ~Gps();

  Gps(const Gps& from);

  inline Gps& operator=(const Gps& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gps& default_instance();

  void Swap(Gps* other);

  // implements Message ----------------------------------------------

  Gps* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Gps& from);
  void MergeFrom(const Gps& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gnss_driver.pb.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::gnss_driver::pb::Header& header() const;
  inline ::gnss_driver::pb::Header* mutable_header();
  inline ::gnss_driver::pb::Header* release_header();
  inline void set_allocated_header(::gnss_driver::pb::Header* header);

  // optional .gnss_driver.pb.Pose localization = 2;
  inline bool has_localization() const;
  inline void clear_localization();
  static const int kLocalizationFieldNumber = 2;
  inline const ::gnss_driver::pb::Pose& localization() const;
  inline ::gnss_driver::pb::Pose* mutable_localization();
  inline ::gnss_driver::pb::Pose* release_localization();
  inline void set_allocated_localization(::gnss_driver::pb::Pose* localization);

  // @@protoc_insertion_point(class_scope:gnss_driver.pb.Gps)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_localization();
  inline void clear_has_localization();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gnss_driver::pb::Header* header_;
  ::gnss_driver::pb::Pose* localization_;
  friend void  protobuf_AddDesc_gps_2eproto();
  friend void protobuf_AssignDesc_gps_2eproto();
  friend void protobuf_ShutdownFile_gps_2eproto();

  void InitAsDefaultInstance();
  static Gps* default_instance_;
};
// ===================================================================


// ===================================================================

// Gps

// optional .gnss_driver.pb.Header header = 1;
inline bool Gps::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gps::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gps::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gps::clear_header() {
  if (header_ != NULL) header_->::gnss_driver::pb::Header::Clear();
  clear_has_header();
}
inline const ::gnss_driver::pb::Header& Gps::header() const {
  // @@protoc_insertion_point(field_get:gnss_driver.pb.Gps.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::gnss_driver::pb::Header* Gps::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::gnss_driver::pb::Header;
  // @@protoc_insertion_point(field_mutable:gnss_driver.pb.Gps.header)
  return header_;
}
inline ::gnss_driver::pb::Header* Gps::release_header() {
  clear_has_header();
  ::gnss_driver::pb::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Gps::set_allocated_header(::gnss_driver::pb::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:gnss_driver.pb.Gps.header)
}

// optional .gnss_driver.pb.Pose localization = 2;
inline bool Gps::has_localization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gps::set_has_localization() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gps::clear_has_localization() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gps::clear_localization() {
  if (localization_ != NULL) localization_->::gnss_driver::pb::Pose::Clear();
  clear_has_localization();
}
inline const ::gnss_driver::pb::Pose& Gps::localization() const {
  // @@protoc_insertion_point(field_get:gnss_driver.pb.Gps.localization)
  return localization_ != NULL ? *localization_ : *default_instance_->localization_;
}
inline ::gnss_driver::pb::Pose* Gps::mutable_localization() {
  set_has_localization();
  if (localization_ == NULL) localization_ = new ::gnss_driver::pb::Pose;
  // @@protoc_insertion_point(field_mutable:gnss_driver.pb.Gps.localization)
  return localization_;
}
inline ::gnss_driver::pb::Pose* Gps::release_localization() {
  clear_has_localization();
  ::gnss_driver::pb::Pose* temp = localization_;
  localization_ = NULL;
  return temp;
}
inline void Gps::set_allocated_localization(::gnss_driver::pb::Pose* localization) {
  delete localization_;
  localization_ = localization;
  if (localization) {
    set_has_localization();
  } else {
    clear_has_localization();
  }
  // @@protoc_insertion_point(field_set_allocated:gnss_driver.pb.Gps.localization)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace gnss_driver

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gps_2eproto__INCLUDED
